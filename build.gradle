buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.github.marceloemanoel:gradle-environments-plugin:0.1"
    }
}

import groovy.io.FileType

apply plugin: "java"
apply plugin: "war"
apply plugin: "idea"
apply plugin: "environments"

targetCompatibility = 1.7
sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.22.2'
    compile project(":biocode-fims-commons")

    testCompile "junit:junit-dep:4.10"
}

webAppDirName = "src/main/web"
libsDirName = "../dist"

clean {
    delete libsDir
}

/*
Delete any resource files in src/main/resources if the file exists in a sub directory
of src/main/environment, excluding the current environment setting directory
*/
task cleanResourceDirectory {
    doLast {
        def allResourceFilesToRemove = []

        def environmentDir = new File("src/main/environment")
        environmentDir.eachFileRecurse(FileType.FILES) { file ->
            allResourceFilesToRemove << file.name
        }

        allResourceFilesToRemove.each {
            def resourceFile = new File("src/main/resources/${it}")
            if (resourceFile.exists()) {
                resourceFile.delete()
            }
        }
    }
}

task copyEnvironmentResources {
    dependsOn cleanResourceDirectory
    doLast {
        project.copy {
            from "src/main/environment/${project.environment}"
            into "src/main/resources"
            include "**/*"
            exclude "web.xml"
            exclude ".gitkeep"
        }
    }
}
processResources.dependsOn copyEnvironmentResources

task copyWebXml {
    inputs.dir "src/main/environment/${project.environment}/web.xml"
    outputs.dir "src/main/web/WEB-INF"
    doLast {
        project.copy {
            from "src/main/environment/${project.environment}"
            into "src/main/web/WEB-INF"
            include "web.xml"
        }
    }
}

processResources.dependsOn copyWebXml

task setProductionEnv << {
    project.ext.environment = "production"
}
task setDevelopmentEnv << {
    project.ext.environment = "development"
}
task setLocalEnv << {
    project.ext.environment = "local"
}

// if setProductionEnv or setDevelopmentEnv is run, make sure this is done before processResources
setProductionEnv.mustRunAfter compileJava
setDevelopmentEnv.mustRunAfter compileJava
setLocalEnv.mustRunAfter compileJava

task deployFimsLocal  {
    description = 'local fims deployment'

    dependsOn setLocalEnv
    dependsOn war

    doLast {
        project.copy {
            from war.destinationDir
            into localWarDirectory
            include war.archiveName
        }
    }
}
