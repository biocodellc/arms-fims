buildscript {
    repositories {
        maven {
            url "http://repo.biocodellc.com/repository/maven-private/"
            credentials {
                username mavenUser
                password mavenPass
            }
        }
        mavenLocal()
    }
    dependencies {
        classpath 'com.github.fgiannesini.libsass.gradle.plugin:libsass-gradle-plugin:+'
        classpath "org.biocode:gradle-fims:1.1.5"
    }
}

apply plugin: 'com.github.fgiannesini.libsass.gradle.plugin'
apply plugin: "org.biocode.fims-web"

import org.biocode.gradle.web.tasks.RestartRemoteJettyTask
import org.biocode.gradle.web.tasks.HotDeployRemoteJettyTask

ext.fimsCommonsVersion = "0.2.2"

fims {
    maven {
        username mavenUser
        password mavenPass
    }
}

repositories {
    add(fims.mavenFims())
    mavenLocal()
}

configurations {
    querydslapt
}

// need to evaluate childProjects first so we can add the childProject server dependencies to the server configuration
evaluationDependsOnChildren()

ext.generatedSourceDir = file("src/main/generated")

idea {
    module {
        generatedSourceDirs += generatedSourceDir
    }
}

sourceSets {
    main {
        java {
            srcDirs += [generatedSourceDir]
        }
    }
}

dependencies {
    server 'org.glassfish.jersey.media:jersey-media-multipart:2.25'
    server('org.glassfish.jersey.ext:jersey-spring3:2.25') {
        exclude module: 'bean-validator'
        exclude module: 'asm-all-repackaged'
    }
    server 'javax.servlet:servlet-api:2.4'
    server 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.6.0'
    server 'com.googlecode.json-simple:json-simple:1.1.1'
    server 'org.springframework.data:spring-data-jpa:1.10.1.RELEASE'
    server group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    server 'org.slf4j:slf4j-log4j12:1.7.19'
    server 'org.apache.commons:commons-digester3:3.2'
    server 'org.apache.poi:poi:3.10.1'
    server 'org.apache.poi:poi-ooxml:3.10.1'
    server 'commons-cli:commons-cli:1.2'

    server group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", "biocode-fims-commons")

    server group: 'com.querydsl', name: 'querydsl-core', version: '4.1.2'
    server group: 'com.querydsl', name: 'querydsl-jpa', version: '4.1.2'
    querydslapt group: 'com.querydsl', name: 'querydsl-apt', version: '4.1.2'

    testCompile "junit:junit-dep:4.10"

    subprojects.each {
        project.configurations.server.dependencies.addAll(it.configurations.server.dependencies)
        project.configurations.serverRuntime.dependencies.addAll(it.configurations.serverRuntime.dependencies)
    }
}

clean {
    delete generatedSourceDir
}

//=================================
//= QueryDSL configuration
//=================================

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt + configurations.server
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = generatedSourceDir
}

//=============================
//= archive configuration
//=============================

war {
    exclude "css/style.css"

    webInf {
        from("${buildDir}/css") {
            into "/css/"
        }
    }
}


fatWar {
    webInf {
        from("${buildDir}/css") {
            into "/css/"
        }
    }
}

//=============================
//= ssh configuration
//=============================

// jetty ssh plugin
remotes {
    biscicol {
        host = 'biscicol.org'
        user = biscicolUser
        password = biscicolPassword
    }
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

//=============================
//= deployment configuration
//=============================

updateDependencies {
    remote = remotes.biscicol
    location = remoteLibsDirectory
}

updateDependenciesDev {
    remote = remotes.biscicol
    location = remoteDevLibsDirectory
}

deployFims {
    remote = remotes.biscicol
    remoteLibsDir = remoteLibsDirectory
    remoteWarDir = remoteWarDirectory
}

deployFimsDev {
    remote = remotes.biscicol
    remoteLibsDir = remoteDevLibsDirectory
    remoteWarDir = remoteWarDevDirectory
}

deployFimsLocal {
    deployDir = localWarDirectory
}

task hotDeployFimsDev(type: HotDeployRemoteJettyTask, dependsOn: "deployFimsDev") {
    group = 'Fims'
    remoteWarDir = remoteWarDevDirectory
    remote = remotes.biscicol
}

task hotDeployFims(type: HotDeployRemoteJettyTask, dependsOn: "deployFims") {
    group = 'Fims'
    remoteWarDir = remoteWarDirectory
    remote = remotes.biscicol
}

task restartFims(type: RestartRemoteJettyTask) {
    group = 'Fims'
    jettyPath = biscicolJettyPath
    remote = remotes.biscicol
}

task restartFimsDev(type: RestartRemoteJettyTask) {
    group = 'Fims'
    jettyPath = biscicolJettyDevPath
    remote = remotes.biscicol
}

//===========================
//= js configuration
//===========================

// specify files that require a specific loading order
ext.externLibsOrdered = ["${webAppDir}/js/externalLibs/lodash.js", "${webAppDir}/js/externalLibs/papaparse.min.js",
                         "${webAppDir}/js/externalLibs/xlsx.min.js", "${webAppDir}/js/externalLibs/xlsx-reader.js"]
javascript.source {
    externLibs {
        js {
            srcDir "src/main/web/js/externalLibs"
            include "*.js"
            // exclude any file that is in the externLibsOrdered list
            exclude {
                it.file in files(externLibsOrdered).files
            }
            exclude "autotrack.js"
        }
    }
    app {
        js {
            srcDir "src/main/web/app"
            include "**/*.js"
            exclude "app.js"
            exclude "app.module.js"
            exclude "app.constants.js.template"
            exclude "**/module.js"
            exclude "**/*.module.js"
        }
    }
    js {
        js {
            srcDir "src/main/web/js"
            include "*.js"
            exclude "fims-analytics.js"
        }
    }
    modules {
        js {
            srcDir "src/main/web/app"
            include "**/module.js"
            include "**/*.module.js"
        }
    }
}

combineJs {
    encoding = "UTF-8"
    source = files("${webAppDirName}/app/app.module.js", javascript.source.modules.js.files, javascript.source.app.js.files, javascript.source.js.js.files)
    dest = file("${webAppDirName}/js/all.js")
}

jsExternalLibs {
    source = externLibsOrdered + javascript.source.externLibs.js.files
    closure {
        compilerOptions.language = "ECMASCRIPT5"
        warningLevel = "QUIET"
    }
}

jsApp {
    source = files("src/main/web/app/app.module.js", javascript.source.modules.js.files, javascript.source.app.js.files, javascript.source.js.js.files)
    closure {
        compilerOptions.language = "ECMASCRIPT5"
    }
}

//===========================
//= libsass configuration
//===========================

libSassParameters {
    inputFilePath = "${projectDir}/src/stylesheets/sass/style.scss"
    outputFilePath = "${buildDir}/css/style.css"
    watchedDirectoryPath = "${projectDir}/src/stylesheets"
    sourceMapEmbed = true
    libSassProductionParameters {
        outputStyle "compressed"
    }
}

fatWar.dependsOn compileLibSassProduction
war.dependsOn compileLibSassProduction
